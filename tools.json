[
  {
    "name": "macos_shell",
    "description": "Execute a shell command in a secure macOS sandbox (no network, limited file access).",
    "parameters": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The shell command to execute."
        }
      },
      "required": ["command"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "stdout": {
          "type": "string",
          "description": "Standard output of the command."
        },
        "stderr": {
          "type": "string",
          "description": "Standard error of the command."
        },
        "exitCode": {
          "type": "number",
          "description": "Process exit code (0 means success)."
        }
      }
    }
  },
  {
    "name": "openai_completion",
    "description": "Call OpenAI GPT model (e.g., GPT-4.1) to get a completion for a given prompt.",
    "parameters": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string",
          "description": "The user prompt or query for the model."
        },
        "model": {
          "type": "string",
          "description": "OpenAI model name (optional, default GPT-4.1)."
        },
        "maxTokens": {
          "type": "number",
          "description": "Maximum tokens in the response (optional)."
        }
      },
      "required": ["prompt"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "completion": {
          "type": "string",
          "description": "The text generated by the OpenAI model."
        }
      }
    }
  },
  {
    "name": "anthropic_completion",
    "description": "Call Anthropic Claude model (e.g., Claude v2) to complete a given prompt.",
    "parameters": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string",
          "description": "The user prompt for Claude."
        },
        "model": {
          "type": "string",
          "description": "Claude model name (optional, default Claude-2)."
        },
        "maxTokens": {
          "type": "number",
          "description": "Maximum tokens to sample in the completion (optional)."
        }
      },
      "required": ["prompt"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "completion": {
          "type": "string",
          "description": "The text generated by Claude."
        }
      }
    }
  },
  {
    "name": "google_gemini",
    "description": "Call Google Gemini via Vertex AI to get a completion for a given prompt.",
    "parameters": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string",
          "description": "The input prompt for the Gemini model."
        },
        "model": {
          "type": "string",
          "description": "Gemini model name or ID (optional, default latest text model)."
        },
        "maxTokens": {
          "type": "number",
          "description": "Max tokens in output (optional)."
        }
      },
      "required": ["prompt"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "completion": {
          "type": "string",
          "description": "The text generated by the Gemini model."
        }
      }
    }
  },
  {
    "name": "groq_completion",
    "description": "Call a Groq AI model (e.g., Llama 4 or Compound) for a given prompt.",
    "parameters": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string",
          "description": "The input prompt for the Groq-hosted model."
        },
        "model": {
          "type": "string",
          "description": "Model name on Groq (optional, default Llama4-70B or Compound)."
        }
      },
      "required": ["prompt"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "completion": {
          "type": "string",
          "description": "The text generated by the Groq model."
        }
      }
    }
  },
  {
    "name": "read_csv",
    "description": "Read a CSV file from local disk and return its contents as JSON records.",
    "parameters": {
      "type": "object",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "Path to the CSV file to read."
        }
      },
      "required": ["filePath"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "description": "Array of records (objects) from the CSV, one per row.",
          "items": { "type": "object" }
        }
      }
    }
  },
  {
    "name": "read_json",
    "description": "Read a JSON file from local disk and return its parsed contents.",
    "parameters": {
      "type": "object",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "Path to the JSON file to read."
        }
      },
      "required": ["filePath"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Parsed JSON content (could be object or array)."
        }
      }
    }
  },
  {
    "name": "read_markdown",
    "description": "Read a Markdown (.md) file and return its text content.",
    "parameters": {
      "type": "object",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "Path to the Markdown file to read."
        }
      },
      "required": ["filePath"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "The raw text content of the Markdown file."
        }
      }
    }
  },
  {
    "name": "read_pdf",
    "description": "Read a PDF file and extract its text content for analysis.",
    "parameters": {
      "type": "object",
      "properties": {
        "filePath": {
          "type": "string",
          "description": "Path to the PDF file to read."
        }
      },
      "required": ["filePath"]
    },
    "returns": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "description": "The extracted text content of the PDF."
        }
      }
    }
  }
]
