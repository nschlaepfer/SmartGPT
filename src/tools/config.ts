import { z } from "zod";

// Define Zod schemas for tool inputs and outputs
// These will be used for validation and type safety

// MacOS Shell Tool
export const macosShellInput = z.object({
  command: z.string().describe("The shell command to execute."),
});

export const macosShellOutput = z.object({
  stdout: z.string().describe("Standard output of the command."),
  stderr: z.string().describe("Standard error of the command."),
  exitCode: z.number().describe("Process exit code (0 means success)."),
});

// OpenAI Tool
export const openaiCompletionInput = z.object({
  prompt: z.string().describe("The user prompt or query for the model."),
  model: z
    .string()
    .optional()
    .describe("OpenAI model name (optional, default GPT-4.1)."),
  maxTokens: z
    .number()
    .optional()
    .describe("Maximum tokens in the response (optional)."),
});

export const openaiCompletionOutput = z.object({
  completion: z.string().describe("The text generated by the OpenAI model."),
});

// Anthropic Tool
export const anthropicCompletionInput = z.object({
  prompt: z.string().describe("The user prompt for Claude."),
  model: z
    .string()
    .optional()
    .describe("Claude model name (optional, default Claude-2)."),
  maxTokens: z
    .number()
    .optional()
    .describe("Maximum tokens to sample in the completion (optional)."),
});

export const anthropicCompletionOutput = z.object({
  completion: z.string().describe("The text generated by Claude."),
});

// Google Gemini Tool
export const googleGeminiInput = z.object({
  prompt: z.string().describe("The input prompt for the Gemini model."),
  model: z
    .string()
    .optional()
    .describe("Gemini model name or ID (optional, default latest text model)."),
  maxTokens: z.number().optional().describe("Max tokens in output (optional)."),
});

export const googleGeminiOutput = z.object({
  completion: z.string().describe("The text generated by the Gemini model."),
});

// Groq Tool
export const groqCompletionInput = z.object({
  prompt: z.string().describe("The input prompt for the Groq-hosted model."),
  model: z
    .string()
    .optional()
    .describe("Model name on Groq (optional, default Llama4-70B or Compound)."),
});

export const groqCompletionOutput = z.object({
  completion: z.string().describe("The text generated by the Groq model."),
});

// File Tools
export const readCsvInput = z.object({
  filePath: z.string().describe("Path to the CSV file to read."),
});

export const readCsvOutput = z.object({
  data: z
    .array(z.record(z.any()))
    .describe("Array of records (objects) from the CSV, one per row."),
});

export const readJsonInput = z.object({
  filePath: z.string().describe("Path to the JSON file to read."),
});

export const readJsonOutput = z.object({
  data: z.any().describe("Parsed JSON content (could be object or array)."),
});

export const readMarkdownInput = z.object({
  filePath: z.string().describe("Path to the Markdown file to read."),
});

export const readMarkdownOutput = z.object({
  content: z.string().describe("The raw text content of the Markdown file."),
});

export const readPdfInput = z.object({
  filePath: z.string().describe("Path to the PDF file to read."),
});

export const readPdfOutput = z.object({
  content: z.string().describe("The extracted text content of the PDF."),
});

// Tool metadata in format compatible with tools.json
export const toolsConfig = [
  {
    name: "macos_shell",
    description:
      "Execute a shell command in a secure macOS sandbox (no network, limited file access).",
    schema: {
      input: macosShellInput,
      output: macosShellOutput,
    },
  },
  {
    name: "openai_completion",
    description:
      "Call OpenAI GPT model (e.g., GPT-4.1) to get a completion for a given prompt.",
    schema: {
      input: openaiCompletionInput,
      output: openaiCompletionOutput,
    },
  },
  {
    name: "anthropic_completion",
    description:
      "Call Anthropic Claude model (e.g., Claude v2) to complete a given prompt.",
    schema: {
      input: anthropicCompletionInput,
      output: anthropicCompletionOutput,
    },
  },
  {
    name: "google_gemini",
    description:
      "Call Google Gemini via Vertex AI to get a completion for a given prompt.",
    schema: {
      input: googleGeminiInput,
      output: googleGeminiOutput,
    },
  },
  {
    name: "groq_completion",
    description:
      "Call a Groq AI model (e.g., Llama 4 or Compound) for a given prompt.",
    schema: {
      input: groqCompletionInput,
      output: groqCompletionOutput,
    },
  },
  {
    name: "read_csv",
    description:
      "Read a CSV file from local disk and return its contents as JSON records.",
    schema: {
      input: readCsvInput,
      output: readCsvOutput,
    },
  },
  {
    name: "read_json",
    description:
      "Read a JSON file from local disk and return its parsed contents.",
    schema: {
      input: readJsonInput,
      output: readJsonOutput,
    },
  },
  {
    name: "read_markdown",
    description: "Read a Markdown (.md) file and return its text content.",
    schema: {
      input: readMarkdownInput,
      output: readMarkdownOutput,
    },
  },
  {
    name: "read_pdf",
    description: "Read a PDF file and extract its text content for analysis.",
    schema: {
      input: readPdfInput,
      output: readPdfOutput,
    },
  },
];

export default toolsConfig;
